<?php

namespace olvlvl\ComposerAttributeCollector;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\Script\Event;
use Symfony\Component\Process\Process;

use function file_exists;
use function file_put_contents;
use function microtime;

use const DIRECTORY_SEPARATOR;

/**
 * @internal
 */
final class Plugin implements PluginInterface, EventSubscriberInterface
{
    public const CACHE_DIR = '.composer-attribute-collector';
    public const VERSION_MAJOR = 2;
    public const VERSION_MINOR = 1;

    /**
     * @uses onPostAutoloadDump
     *
     * @codeCoverageIgnore
     */
    public static function getSubscribedEvents(): array
    {
        return [
            'post-autoload-dump' => 'onPostAutoloadDump',
        ];
    }

    /**
     * @codeCoverageIgnore
     */
    public function activate(Composer $composer, IOInterface $io): void
    {
        $vendorDir = Config::resolveVendorDir($composer);
        $filename = $vendorDir . DIRECTORY_SEPARATOR . "attributes.php";

        if (file_exists($filename)) {
            return;
        }

        $stub = <<<PHP
        <?php

        // attributes.php @generated by https://github.com/olvlvl/composer-attribute-collector
        // This is a placeholder to enable the rendering of the autoloader.

        PHP;

        file_put_contents($filename, $stub);
    }

    /**
     * @codeCoverageIgnore
     */
    public function deactivate(Composer $composer, IOInterface $io): void
    {
    }

    /**
     * @codeCoverageIgnore
     */
    public function uninstall(Composer $composer, IOInterface $io): void
    {
    }

    public static function onPostAutoloadDump(Event $event): void
    {
        $composer = $event->getComposer();
        $io = $event->getIO();
        $config = Config::from($composer, isDebug: $io->isDebug());

        require_once $config->vendorDir . "/autoload.php";

        $io->write('<info>Generating attributes file</info>');
        $start = microtime(true);
        self::dump($config);
        $elapsed = ElapsedTime::render($start);
        $io->write("<info>Generated attributes file in $elapsed</info>");
    }

    public static function dump(Config $config): void
    {
        $cmd = __DIR__ . '/../collector.php';
        $process = new Process([ $cmd, '--', serialize($config) ]);
        $process->mustRun(fn (string $type, string $line) => print($line));
    }
}
