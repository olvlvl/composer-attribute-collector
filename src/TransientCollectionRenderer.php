<?php

namespace olvlvl\ComposerAttributeCollector;

use function var_export;

/**
 * Renders collected attribute targets as PHP code.
 *
 * @internal
 */
final class TransientCollectionRenderer
{
    public static function render(TransientCollection $collector): string
    {
        $targetClassesCode = self::targetsToCode($collector->classes);
        $targetMethodsCode = self::targetsToCode($collector->methods);
        $targetPropertiesCode = self::targetsToCode($collector->properties);
        $targetParametersCode = self::targetsToCode($collector->parameters);

        return <<<PHP
        <?php

        // attributes.php @generated by https://github.com/olvlvl/composer-attribute-collector

        \olvlvl\ComposerAttributeCollector\Attributes::with(fn () => new \olvlvl\ComposerAttributeCollector\Collection(
            targetClasses: $targetClassesCode,
            targetMethods: $targetMethodsCode,
            targetProperties: $targetPropertiesCode,
            targetParameters: $targetParametersCode,
        ));
        PHP;
    }

    /**
     * //phpcs:disable Generic.Files.LineLength.TooLong
     *
     * @param iterable<class-string, iterable<TransientTargetClass|TransientTargetMethod|TransientTargetParameter|TransientTargetProperty>> $targetByClass
     *
     * @return string
     */
    private static function targetsToCode(iterable $targetByClass): string
    {
        $array = self::targetsToArray($targetByClass);

        return var_export($array, true);
    }

    /**
     * //phpcs:disable Generic.Files.LineLength.TooLong
     *
     * @param iterable<class-string, iterable<TransientTargetClass|TransientTargetMethod|TransientTargetParameter|TransientTargetProperty>> $targetByClass
     *
     * @return array<class-string, array<array{
     *     string,
     *     class-string,
     *     2?:non-empty-string,
     *     3?:non-empty-string
     * }>> Where _key_ is an attribute class and _value_ is an array of parameters,
     *     where `1` is the serialized arguments and `2` is the target class.
     */
    private static function targetsToArray(iterable $targetByClass): array
    {
        $by = [];

        foreach ($targetByClass as $class => $targets) {
            foreach ($targets as $t) {
                $a = [ serialize($t->arguments), $class ];

                if ($t instanceof TransientTargetParameter) {
                    $a[] = $t->method;
                }

                if (
                    $t instanceof TransientTargetMethod
                    || $t instanceof TransientTargetProperty
                    || $t instanceof TransientTargetParameter
                ) {
                    $a[] = $t->name;
                }

                $by[$t->attribute][] = $a;
            }
        }

        return $by;
    }
}
